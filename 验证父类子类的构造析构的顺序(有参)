//验证父类子类的构造析构的顺序:(有参构造)
#include<iostream>
using namespace std;
//父类:
class Base
{
public:
	int a;
public:
	Base()
	{
		cout << "父类的无参构造" << endl;
	}
	Base(int a)
	{
		this->a = a;
		cout << "父类的有参构造" << endl;
	}
	~Base()
	{
		cout << "父类的析构函数" << endl;
	}
};
	//子类的成员函数:
class Other
{
public:
	int b;
public:
	Other()
	{
		cout << "子类成员函数的无参构造" << endl;
	}
	Other(int b)
	{
		this->b;
		cout << "成员函数的有参构造" << endl;
	}
	~Other()
	{
		cout << "子类成员函数的析构函数" << endl;
	}
};
//子类:
class Son:public Base
{
public:
	Other er;
	int c;
public:
	Son()
	{
		cout << "子函数的无参构造" << endl;
	}
	Son(int a, int b, int c) :Base(a), er(b)
	{
		this->c = c;
		cout << "子函数的有参构造" << endl;
	}
	~Son()
	{
		cout << "子函数的析构函数" << endl;
	}
};

int main()
{
	Son son1(1,2,3);
	return 0;
}